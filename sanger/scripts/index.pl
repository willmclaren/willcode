#!/usr/bin/perl

# MODULES
#########

# CGI modules
use CGI qw/:standard/;
use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
use CGI::Pretty;

# DBI
use DBI;

# GD
use GD;

# mail
use Mail::Sendmail;

# connect to the database
$db = DBI->connect(
	"DBI:mysql:database=wilmcl_db;host=mysql2.freehostia.com",
	"wilmcl_db",
	"yb93vw",
	#{'RaiseError' => 1}
) or die "Could not connect to DB";

$this_page = "http://will.freehostia.com/";



# AUTHENTICATION
################

# load in the passwords from the pass file
open PASS, "data/pass" or die "Could not open password file";
while(<PASS>) {
	chomp;
	($user, $pass) = split /\t/, $_;
	
	$users{$user} = $pass;
}
close PASS;

# read the cookie
$cookie = cookie('willnkelly');

($user, $pass) = split /\;/, $cookie;

our $logged_in;

# check user
if(($users{$user} eq $pass) && $cookie && $users{$user}) {
	$logged_in = 1;
}

else {
	$logged_in = 0;
}


if(!param) {
	
	# get the timezone
	##################
	
	$zone_st = $db->prepare(
		"SELECT c.timezone_id, t.name, t.difference ".
		"FROM timezones t, current_zone c ".
		"WHERE c.timezone_id = t.timezone_id;"
	);
	$zone_st->execute;
	$zone = $zone_st->fetchrow_hashref;
	
	$ds = 0;
	$ds = 1 if $zone->{'name'} =~ /UK/;
	
	$difference = $zone->{'difference'} * 3600000;

	# JAVASCRIPT
	############
	
$javascript =<<END;

var my_tz = $ds;
var my_difference = $difference;

// confirmation for deletion
function confirmDelete(address) {
	var y=window.confirm("Are you sure you want to delete?");
	
	if(y == 1) {
		window.location.href = address;
		//history.go();
	}
}

// function to fill in bits of entry form
function fillForm(id, user, date, title, content) {
	
	var form = document.getElementById("editorForm");
	var div = document.getElementById("editorInfo");
	
	if(id == '') {
		div.innerHTML = "New entry";
	}
	
	else {
		div.innerHTML = "ID: "+id+" | Author: "+user+" | Date: "+date;
	}
	
	form.title.value = title;
	form.content.value = content;
	form.date.value = date;
	form.entry_id.value = id;
	form.user.value = user;
	
	if(document.getElementById("commentLayer").style.height != "0px") {
		showhide("commentLayer");
	}
}

// function to fill in bits of comment form
function fillComment(id, title) {
	
	var form = document.getElementById("commentForm");
	var div = document.getElementById("commentInfo");
	
	div.innerHTML = "You are adding a comment to the entry \'"+title+"\'";
	
	form.subject.value = title;
	form.entry_id.value = id;
	
	if(document.getElementById("commentLayer").style.height == "0px") {
		showhide("commentLayer");
	}
}

// function to show/hide layers
function showhide(lyr) {
	var lyrobj = document.getElementById(lyr);
	//var image = document.getElementById('img'+lyr);
	
	if(lyrobj.style.height == "0px") {
		lyrobj.style.height = "";
		lyrobj.style.display = "";
		//image.src = "$image_dir/layout/permanent/news_up.jpg";
	}
	
	else {
		lyrobj.style.height = "0px";
		lyrobj.style.display = "none";
		//image.src = "$image_dir/layout/permanent/news_down.jpg";
	}
}

	
END
	
$end_javascript =<<JSEND;


// Clock Script Generated By Maxx Blade's Clock v2.0d
// http://www.maxxblade.co.uk/clock
function tS(){ var x=new Date(tN().getUTCFullYear(),tN().getUTCMonth(),tN().getUTCDate(),tN().getUTCHours(),tN().getUTCMinutes(),tN().getUTCSeconds()); x.setTime((x.getTime()+my_difference)+(dS()*my_tz)+0); return x; } 
function tN(){ return new Date(); } 
function dS(){ return ((tN().getTime()>fD(0,2,2,-1).getTime())&&(tN().getTime()<fD(0,9,2,-1).getTime()))?3600000:0; } 
function fD(d,m,h,p){ var week=(p<0)?7*(p+1):7*(p-1),nm=(p<0)?m+1:m,x=new Date(tN().getUTCFullYear(),nm,1,h,0,0),dOff=0; if(p<0){ x.setTime(x.getTime()-86400000); } if(x.getDay()!=d){ dOff=(x.getDay()<d)?(d-x.getDay()):0-(x.getDay()-d); if(p<0&&dOff>0){ week-=7; } if(p>0&&dOff<0){ week+=7; } x.setTime(x.getTime()+((dOff+week)*86400000)); } return x; } 
function lZ(x){ return (x>9)?x:'0'+x; } 
function dE(x){ if(x==1||x==21||x==31){ return 'st'; } if(x==2||x==22){ return 'nd'; } if(x==3||x==23){ return 'rd'; } return 'th'; } 
function dT(){ document.getElementById('tP').innerHTML=eval(oT); setTimeout('dT()',1000); } 
function y4(x){ return (x<500)?x+1900:x; } 
var dN=new Array('Sun','Mon','Tue','Wed','Thu','Fri','Sat'),mN=new Array('January','February','March','April','May','June','July','August','September','October','November','December'),oT="dN[tS().getDay()]+' '+tS().getDate()+dE(tS().getDate())+' '+mN[tS().getMonth()]+' '+y4(tS().getYear())+','+' '+lZ(tS().getHours())+':'+lZ(tS().getMinutes())+':'+lZ(tS().getSeconds())+' '";
if(!document.all){ window.onload=dT; }else{ dT(); }

JSEND
	
	# GET STUFF FROM DB
	###################

	
	$st = $db->prepare("SELECT entry_id, title, content, date_format(date, '%W %D %M %Y at %T') format_date, date FROM entries ORDER BY date DESC;");
	$st->execute;
	
	while($ref = $st->fetchrow_hashref) {
		push @entries, $ref;
	}
	
	
	# create a list of the latest entries for the side bar
	$i = 0;
	
	while(($i < 10) && ($i <= $#entries)) {
		push(@side_bar,
			#Tr(
				td(
					{-colspan => 2},
					a(
						{-href => "#".$entries[$i]->{'entry_id'}},
						$entries[$i]->{'title'},
					),
				),
			#)
		);
		$i++;
	}
	
	
	# statement for images
	$image_st = $db->prepare("SELECT * FROM images WHERE entry_id = ? ORDER BY image_id ASC;");
	
	# statement for comments
	$comment_st = $db->prepare(
		"SELECT *, date_format(date, '%W %D %M %Y at %T') format_date ".
		"FROM comments WHERE entry_id = ? ORDER BY date DESC;");
	
	# now create a list of entries for the main body
	foreach $entry(@entries) {
		
		# make the onclick for this entry	
		$title = $entry->{'title'};
		$title =~ s/\'/\\\'/g;
		$title =~ s/\"/\\\"/g;
		
		
		$entry->{'content'} =~ s/\n+//g;
		$entry->{'content'} =~ s/\r+//g;
		$entry->{'content'} =~ s/\[newline\]/\<br\>/g;
		$content = $entry->{'content'};
		$content =~ s/\'/\\\'/g;
		$content =~ s/\"/\\\"/g;
	
		$onclick = 
			"fillForm(".
				"'$entry->{'entry_id'}',".
				"'$entry->{'user'}',".
				"'$entry->{'date'}',".
				"'$title',".
				"'$content'".
			");";
			
		$commentclick =	"fillComment('$entry->{'entry_id'}', 'Re: $entry->{'title'}');";
						
		# check for any images associated with this entry
		$image_st->execute($entry->{'entry_id'});
		
		@images = ();
		
		while($ref = $image_st->fetchrow_arrayref) {
			push @images,
				"<nobr>".
					"<a href=\"images/upload/$ref->[0].jpg\" title=\"$ref->[2]\" rel=\"lightbox\[$entry->{'entry_id'}\]\">".
						"<img border=\"0\" src=\"images/upload/thumb.$ref->[0].jpg\">".
					"</a>".
					($logged_in ?
						"<a href=\"javascript:confirmDelete('remove.pl?type=image&id=$ref->[0]');\" title=\"Delete image\">".
							"x".
						"</a>".
						"|".
						"<a href=\"rotate.pl?id=$ref->[0]&dir=l\" title=\"Rotate image 90 degrees anti-clockwise\">".
							"l".
						"</a>".
						"|".
						"<a href=\"rotate.pl?id=$ref->[0]&dir=r\" title=\"Rotate image 90 degrees clockwise\">".
							"r".
						"</a>"
						: ""
					).
				"</nobr>";
		}
		
		# check for any comments associated with this entry
		$comment_st->execute($entry->{'entry_id'});
		
		@comments = ();
		
		while($ref = $comment_st->fetchrow_arrayref) {
			$ref->[4] =~ s/\n+//g;
			$ref->[4] =~ s/\r+//g;
			$ref->[4] =~ s/\[newline\]/\<br\>/g;
			
			push @comments,
				td(
					{-colspan => 2},
					table(
						{-cellpadding => 5, -cellspacing => 0, -width => "100%"},
						
						Tr(
							td(
								{-width => 2, -rowspan => 3, -valign => "top"},
								font(
									{-color => "#999999"},
									strong(">"),
								),
							),
							td(
								strong($ref->[3]),
								font(
									{-size => 1, -color => "#999999"},
									"Posted by ".($ref->[2] ? $ref->[2] : "nobody")." on ".$ref->[6],
								),
							),
						),
						
						Tr(
							td(
								$ref->[4],
							),
						),
						
						Tr(
							td(
								font(
									{-size => 1},
									a(
										{
											-href => "#comments",
											-onclick => 
												"fillComment('$entry->{'entry_id'}', '".
												($ref->[3] =~ /^Re.+/ ? "" : "Re: ").$ref->[3]."');"
										},
										"Reply to this comment"
									),
								
									($logged_in ?
										(
											" | ",
											a(
												#{-href => "javascript:;", -onclick => "confirmDelete('".$this_page."remove.pl?type=comment&id=".$ref->[0]."');"},
												{-href => "javascript:confirmDelete('".$this_page."remove.pl?type=comment&id=".$ref->[0]."');"},
												"Delete comment"
											)
										)
										
										: ""
									)
								),
							),
						),
					),
				);
		}
		
		push @main,
			td(
				table(
					{-cellpadding => 0, -cellspacing => 0, -width => "100%"},
					
					# header row
					Tr(
						td(
							{-align => "left", -colspan => 2},
							a(
								{-name => $entry->{'entry_id'}},
								""
							),
							font(
								{-size => 4},
								strong($entry->{'title'}),
							),
						),
					),
					
					# content
					Tr(
						td(
							{-colspan => 2},
							$entry->{'content'},
						),
					),
					
					Tr(
						td(
							{-colspan => 2},
							br,
							join "\n", @images,
						),
					),
					
					(@comments ? 
						(
							Tr(
								td(
									{-colspan => 2},
									br,
									font(
										{-size => 1},
										"There ".(scalar @comments == 1 ? "is" : "are")." ".(scalar @comments).(scalar @comments == 1 ? " comment" : " comments")." on this entry | ",
										a(
											{-href => "javascript:;", -onclick => "showhide(\"comments".$entry->{'entry_id'}."\");"},
											"show / hide",
										),
									),
								),
							),
							Tr(
								td(
									{-colspan => 2},
									div(
										{-id => "comments$entry->{'entry_id'}", -style => "overflow:hidden;height:0px;display:none;"},
										table(
											{-cellpadding => 0, -cellspacing => 0, -width => "100%"},
											Tr(\@comments),
										),
									),
								),
							),
						)
						: ""
					),
					
					# details
					Tr(
						td(
							{-align => "left"},
							font(
								{-size => 1},
								
								br,
								a(
									{-href => "#top"},
									"Back to top"
								),
								
								" | ",
								
								a(
									{-href => "#comments", onClick => $commentclick},
									"Add a comment"
								),
								
							
								($logged_in ? 
								
								(
									" | Admin : ",
									a(
										{
											-href => "#editor",
											-onClick => $onclick,
										},
										"Edit",
									),
									" | ",
									a(
										{-href => "javascript:confirmDelete('remove.pl?type=entry&id=".$entry->{'entry_id'}."');"},
										"Delete"
									)
								)
								
								: 
								
								"&nbsp;"
								),
							),
						),
					
						td(
							{-align => "right"},
							font(
								{-size => 1},
								br,
								"Posted ", $entry->{'format_date'},
							),
						),
					),
					
					# separator
					Tr(
						td(
							{-colspan => 2},
							br,
							div(
								{-align => "center"},
								img(
									{-src => "images/separator.png"},
								),
							),
						),
					),
				),
			);
	}
	
	
	
	# START HTML
	############
	
	$header =<<HEADER;

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
<head><title>Will &amp; Kelly&#39;s blog-o-matic</title>
<link rel="stylesheet" type="text/css" href="style.css" />
<script type="text/javascript" src="js/prototype.js"></script>
<script type="text/javascript" src="js/scriptaculous.js?load=effects"></script>
<script type="text/javascript" src="js/lightbox.js"></script>
<link rel="stylesheet" href="css/lightbox.css" type="text/css" media="screen" />
<script type="text/javascript">
<!--
$javascript
//-->
</script>
</head>
<body fontface="arial, helvetica, sans-serif">
HEADER
	
	print
		header,
		$header,
# 		header,
# 		start_html(
# 			-title => "Will & Kelly's blog-o-matic",
# 			-style => {src => "style.css"},
# 		),

		a(
			{-name => "top"},
			""
		),
		
		# main containing table
		"<table cellpadding=\"0\" cellspacing=\"0\" width =\"800\" height=\"100%\">",
		
		# header bar
		Tr(
			td(
				{-colspan => 3, -bgcolor => "#999999"},
				
				table(
					{-cellpadding => 10, -width => "100%"},
					Tr(
						td(
							font(
								{-size => 4, -color => "white", -face => "arial, helvetica, sans-serif"},
								strong("Will & Kelly's blog-o-matic"),
							),
						),
						td(
							{-align => "right"},
							font(
								{-size => 2, -color => "white", -face => "arial, helvetica, sans-serif"},
								strong("Current location: ".$zone->{'name'}." | "),
								($logged_in ?
									(
										a(
											{-href => "zone.pl"},
											"Change",
										),
										" | "
									)
									: ""
								),
								span({-id => "tP"}),
							),
						),
					),
				),
			),
		),
		
		"<tr valign=\"top\">",
		
		# side bar with links and whatnot
		td(
			{-width => 150},
			table(
				{-cellpadding => 2},
				Tr(
					td(
						{-colspan => 2},
						strong("Latest entries"),
					),
				),
				
				Tr(\@side_bar),
				
				# break
				Tr(td("&nbsp;")),
				
				Tr(
					td(
						{-colspan => 2},
						strong("Administration"),
					),
				),
				
				
				# is there a user logged in?
				($logged_in ?
				
				# ADMIN BITS
				############
				
				(
					Tr(
						td(
							{-colspan => 2},
							a(
								{
									-href => "#editorForm",
									-onClick => "fillForm('','','','','');",
								},
								"Add a new entry",
							),
						),
					),
					Tr(
						td(
							{-colspan => 2},
							a(
								{-href => 'http://cp.freehostia.com/members/login.php'},
								"Database admin",
							),
						),
					),
					Tr(
						td(
							{-colspan => 2},
							a(
								{-href => 'remove.pl?type=cookie'},
								"Logout",
							),
						),
					),
				)
					
				
				:			
				
				# LOGIN BIT
				###########
				(
					start_form(-action => "login.pl", -id => "loginForm", -name => "loginForm"),
					
					Tr(
						td(
							font(
								{-size => 1},
								"User: ",
							),
						),
						td(
							textfield(-class => "TextField", -name => "user"),
						),
					),
					Tr(
						td(
							font(
								{-size => 1},
								"Pass: ",
							),
						),
						td(	
							password_field(-class => "TextField", -name => "pass")
						),
					),
					Tr(
						td(
							{-colspan => 2, -align => "right"},
							font(
								{-size => 1},
								a(
									{-href => "javascript:document.loginForm.submit();"},
									"Login",
								),
								" | ",
								a(
									{-href => "javascript:;", -onclick => "document.getElementById(\"loginForm\").reset();"},
									"Clear",
								),
							),
						),
					),
					
					end_form,
				)
				
				),
				
				Tr(td("&nbsp;")),
				
				Tr(
					td(
						{-colspan => 2},
						font(
							{-size => 1, -color => "#999999"},
							"Designed and coded by Will", br, br,
							"NB: You must have JavaScript enabled to use this site",
						),
					),
				),
			),
		),
		
		# gradient bar
		td(
			{-width => 5},
			table(
				{-cellpadding => 0, -cellspacing => 0},
				Tr(
					td(img({-src => "images/gradient.bar.png"})),
					td(img({-src => "images/gradient.bar.png"})),
					td(img({-src => "images/gradient.bar.png"})),
					td(img({-src => "images/gradient.bar.png"})),
					td(img({-src => "images/gradient.bar.png"})),
				),
			),
		),
		
		td(
			{-width => "650"},
			table(
				{-cellpadding => 5},
				Tr(\@main),
				
				# COMMENT FORM
				##############
				
				td(
					div(
						{-id => "commentLayer", -style => "overflow:hidden;height:0px;display:none;"},
						a(
							{-name => "comments"},
							"",
						),
						
						start_form(-id => "commentForm", -name => "commentForm", -action => "comment.pl"),
						
						table(
							{-cellpadding => 0, -cellspacing => 5, width => "100%"},
							
							Tr(
								td("Details"),
								td(
									font(
										{-color => "#999999", -size => 1},
										div(
											{-id => "commentInfo"},
											"New comment",
										),
									),
								),
							),
							
							Tr(
								td(
									"Name",
								),
								td(
									textfield(-class => "Comment", -name => "name"),
								),
							),
							Tr(
								td(
									"Subject",
								),
								td(
									textfield(-class => "Comment", -name => "subject"),
								),
							),
							Tr(
								td(
									"Comment",
								),
								td(
									textarea(-class => "Comment", -name => "comment"),
								),
							),
							Tr(
								td(
									"&nbsp;",
								),
								td(
									{-align => "right"},
									font(
										{-size => "1"},
										a(
											{-href => "javascript:;", -onclick => "showhide(\"commentLayer\");"},
											"Hide the comment form",
										),
										" | ",
										a(
											{-href => "javascript:;", -onclick => "document.getElementById('commentForm').reset();"},
											"Clear form",
										),
										" | ",
										a(
											{-href => "javascript:document.commentForm.submit();"},#, -onclick => "document.commentForm.submit();"},
											"Add comment",
										),
									),
								),
							),
							
									
							# separator
							Tr(
								td(
									{-colspan => 2},
									br,
									div(
										{-align => "center"},
										img(
											{-src => "images/separator.png"},
										),
									),
								),
							),
						),
						
						hidden(-name => "entry_id"),
						
						end_form,
					),
				),
				
				
				
				
				
				($logged_in ?
				
				# EDITOR
				########
				
				(
					Tr(
						td(
							start_multipart_form(-id => "editorForm", -name => "editorForm"),
							a(
								{-name => "editor"},
								"",
							),
							
							table(
								{-cellpadding => 0, -cellspacing => 5, width => "100%"},
								Tr(
									td(
										"Details",
									),
									td(
										font(
											{-color => "#999999", -size => 1},
											div(
												{-id => "editorInfo"},
												"New entry",
											),
										),
									),
								),
								Tr(
									td(
										"Title",
									),
									td(
										textfield(-class => "Editor", -name => "title"),
									),
								),
								Tr(
									td(
										"Content ",
									),
									td(
										textarea(-class => "Editor", -name => "content", -rows => 5),
									),
								),
								Tr(
									td(
										"Images",
									),
									td(
										"1 ", filefield(-name => "image1"), " Comment ",
										textfield(-style => "width:300px", -name => "comment1"), br,
										
										"2 ", filefield(-name => "image2"), " Comment ",
										textfield(-style => "width:300px", -name => "comment2"), br,
										
										"3 ", filefield(-name => "image3"), " Comment ",
										textfield(-style => "width:300px", -name => "comment3"),
									),
								),
								Tr(
									td(
										"&nbsp;",
									),
									td(
										{-align => "right"},
										font(
											{-size => "1"},
											a(
												{-href => "javascript:;", -onclick => "fillForm('','','','','');"},
												"Clear form",
											),
											" | ",
											a(
												{-href => "javascript:document.editorForm.submit();"},
												"Add or Update entry",
											),
										),
# 										"<input type=\"image\" src=\"images/add.png\" value=\"Submit\" alt=\"Submit\">",
									),
								),
							),
							
							# hidden fields
							hidden(-name => "date"),
							hidden(-name => "entry_id"),
							hidden(-name => "user", -default => $user),
							
							end_form,
						),
					)
				)
				
				
				:
				
				""
				)
			),
		),
		
		"</tr></table>",
		
		"\n".'<script type="text/javascript">'."\n",
		'<!--'."\n",
		$end_javascript,
		"\n".'//-->'."\n",
		"<\/script>\n",
		end_html;
}



elsif(param() && $logged_in) {
	
	@list = param();
	foreach $item(@list) {
		$params{$item} = param($item);
		$params{$item} =~ s/\'/\\\'/g;
	}
	
	$params{'content'} =~ s/\r\n/\[newline\]/g;
	
	# get list of ID's in database
	$st = $db->prepare("SELECT entry_id FROM entries;");
	$st->execute;
	
	while($ref = $st->fetchrow_arrayref) {
		$ids{$ref->[0]} = 1;
	}
	
	@cat_list = qw/title content date user/;
	
	if($ids{$params{'entry_id'}}) {
		
		$statement = "UPDATE entries SET ";
					
		$first = 1;
		foreach $cat(@cat_list) {
			next if $cat eq 'entry_id';
			next if $cat eq 'date';
			$statement .= "," unless $first;
			$statement .= "`$cat`='$params{$cat}'";
			$first = 0;
		}
		
		$statement .= " WHERE `entry_id` = $params{'entry_id'} LIMIT 1";
		
		$st = $db->prepare($statement);
		$st->execute;
	}
	
	else {
		$statement = "INSERT INTO entries (`".(join "`,`", @cat_list)."`) VALUES (";
		
		# get the time
		@time = localtime(time());
		
		$time[4]++;
		
		for $i(0..4) {
			$time[$i] = "0".$time[$i] if $time[$i] < 10;
		}
		
		$params{'date'} = ($time[5] + 1900)."-".$time[4]."-".$time[3]." ".($time[2] - 2).":".$time[1].":".$time[0];
		
		# add the values
		$first = 1;
		foreach $cat(@cat_list) {
			$statement .= "," unless $first;
			$statement .= "'$params{$cat}'";
			$first = 0;
		}
		
		# close up and execute the statement
		$statement .= ")";
		
		$st = $db->prepare($statement);
		$st->execute;
		$st->finish;
		
		@email_addresses = (
			'willmclaren@hotmail.com',
			'wolveswill@yahoo.co.uk',
			'will.mclaren@mss.effem.com',
		);
		
# 		# send an email to people
# 		%mail = (
# 			To => $email_addresses[0],#(join ",", @email_addresses),
# 			From => "noreply\@will.freehostia.com",
# 			Message => 
# 				"Hello,\n\nA new entry entitled '$params{'title'}' has been added to Will & Kelly's Blog\-o\-matic.\n".
# 				"You can see it by going here: http:\/\/will.freehostia.com/\n\n".
# 				"Will & Kelly"
# 		);
# 		
# 		sendmail(%mail) or die $Mail::Sendmail::error;
		
# 		$email = 
# 			"Subject: Entry added to Will & Kelly's Blog\-o\-matic\n".
# 			"From: noreply\@will.freehostia.com\n".
# 			#"To: ".(join ",", @email_addresses)."\n".
# 			"To: ".$email_addresses[0]."\n".
# 			"Content-type: text/plain\n\n".
# 			"Hello,\n\nA new entry entitled '$params{'title'}' has been added to Will & Kelly's Blog\-o\-matic.\n".
# 			"You can see it by going here: http:\/\/will.freehostia.com/\n\n".
# 			"Will & Kelly";
# 			
# 		
# 		open SENDMAIL, "|/usr/sbin/sendmail -t" or print "Cannot open /usr/bin/sendmail";
# 		print SENDMAIL $email;
# 		close SENDMAIL;
# 		
# 		$email =~ s/\n/<br>/g;
		
		# get the DB-created ID of this entry		
		$entry_id_st = $db->prepare("SELECT MAX(entry_id) FROM entries;");
		$entry_id_st->execute;
		$params{'entry_id'} = ($entry_id_st->fetchrow_array)[0];
							
	}
	
	# images
	if($params{'image1'} || $params{'image2'} || $params{'image3'}) {
		foreach $i(1..3) {
			next unless $params{'image'.$i};
			
			$image_handle = $params{'image'.$i};
										
			# find out what kind of image file it is
			$image_type = (split /\./, $image_handle)[-1];
					
			if($image_type =~ /jpeg|jpg|png|gif/i) {
				
				if($image_type =~ /jpeg|jpg/i) {
					$gd = GD::Image->newFromJpeg($image_handle);
				}
				elsif($image_type =~ /png/i) {
					$gd = GD::Image->newFromPng($image_handle);
				}
				elsif($image_type =~ /gif/i) {
					$gd = GD::Image->newFromGif($image_handle);
				}
				else {
					next;
				}
				
# 				$gd = GD::Image->newFromJpeg($image_handle);
# 				
				# add the details to the database
				$db->do("INSERT INTO images (image_id, entry_id, comment) VALUES ('', '$params{'entry_id'}', '".$params{'comment'.$i}."');");
				
				# get the ID of the inserted image
				$image_id_st = $db->prepare("SELECT MAX(image_id) FROM images;");
				$image_id_st->execute;
				$image_id = ($image_id_st->fetchrow_array)[0];
							
				($width, $height) = $gd->getBounds();
				
				# create a thumbnail
				$new_height = 75;
				$new_width = sprintf("%.0f", ($width / $height) * $new_height);
				
				$thumb = GD::Image->new($new_width, $new_height);
				$thumb->copyResized($gd, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
				#$thumb->copyResampled($gd, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
				
				open OUT, ">images/upload/thumb.$image_id.jpg" or die "Could not open image";
				print OUT $thumb->jpeg();
				close OUT;
				
				# shrink the image if we need to
				if($height > 400) {
					$new_height = 400;
					$new_width = sprintf("%.0f", ($width / $height) * $new_height);
					
					$resized = GD::Image->new($new_width, $new_height);
					$resized->copyResized($gd, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
					#$resized->copyResampled($gd, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
					
					$gd = $resized;
				}
				
				($width, $height) = $gd->getBounds();
				
				if($width > 800) {
					$new_width = 800;
					$new_height = sprintf("%.0f", ($height / $width) * $new_width);
					
					$resized = GD::Image->new($new_width, $new_height);
					$resized->copyResized($gd, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
					#$resized->copyResampled($gd, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
					
					$gd = $resized;
				}
					
				
				# output the image
				open OUT, ">images/upload/$image_id.jpg" or die "Could not open image";
				print OUT $gd->jpeg();
				close OUT;
			}
	    }
    }
			
	
	print
		header,
		start_html(($params{'entry_id'} ? "Entry edited" : "Entry added")),
		"Your entry $data{'title'} has been added ",
		br, br,
		"Redirecting you back to the ",
		a(
			{-href => "index.pl"},
			"main page",
		),
		
		br, $email, br,
		
		"<script language=\"JavaScript\">\n",
		"<!--\n",
		"setTimeout(\'Redirect\(\)\', 3000)\n;",
		"function Redirect()\n",
		"{\nlocation.href = \'index.pl\';\n}\n",
		"// --></script>\n",
		
		end_html;
}



else {
	print
		header,
		start_html,
		"No cheese, fatso",
		end_html;
}
	